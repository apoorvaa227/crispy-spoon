(()=>{"use strict";var n={538:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"/*** The new CSS Reset - version 1.2.0 (last updated 23.7.2021) ***/\n\n/* Remove all the styles of the \"User-Agent-Stylesheet\", except for the 'display' property */\n*:where(:not(iframe, canvas, img, svg, video):not(svg *)) {\n  all: unset;\n  display: revert;\n}\n\n/* Preferred box-sizing value */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/*\n  Remove list styles (bullets/numbers)\n  in case you use it with normalize.css\n*/\nol,\nul {\n  list-style: none;\n}\n\n/* For images to not be able to exceed their container */\nimg {\n  max-width: 100%;\n}\n\n/* Removes spacing between cells in tables */\ntable {\n  border-collapse: collapse;\n}\n\n/* Revert the 'white-space' property for textarea elements on Safari */\ntextarea {\n  white-space: revert;\n}\n","",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA,mEAAmE;;AAEnE,4FAA4F;AAC5F;EACE,UAAU;EACV,eAAe;AACjB;;AAEA,+BAA+B;AAC/B;;;EAGE,sBAAsB;AACxB;;AAEA;;;CAGC;AACD;;EAEE,gBAAgB;AAClB;;AAEA,wDAAwD;AACxD;EACE,eAAe;AACjB;;AAEA,4CAA4C;AAC5C;EACE,yBAAyB;AAC3B;;AAEA,sEAAsE;AACtE;EACE,mBAAmB;AACrB",sourcesContent:["/*** The new CSS Reset - version 1.2.0 (last updated 23.7.2021) ***/\n\n/* Remove all the styles of the \"User-Agent-Stylesheet\", except for the 'display' property */\n*:where(:not(iframe, canvas, img, svg, video):not(svg *)) {\n  all: unset;\n  display: revert;\n}\n\n/* Preferred box-sizing value */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/*\n  Remove list styles (bullets/numbers)\n  in case you use it with normalize.css\n*/\nol,\nul {\n  list-style: none;\n}\n\n/* For images to not be able to exceed their container */\nimg {\n  max-width: 100%;\n}\n\n/* Removes spacing between cells in tables */\ntable {\n  border-collapse: collapse;\n}\n\n/* Revert the 'white-space' property for textarea elements on Safari */\ntextarea {\n  white-space: revert;\n}\n"],sourceRoot:""}]);const s=i},402:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,":root {\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,\n    Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --primary-bg-color: #333;\n    --secondary-bg-color: #444;\n    --text-color: #fff;\n  }\n}\n\n@media (prefers-color-scheme: light) {\n  :root {\n    --primary-bg-color: #fff;\n    --secondary-bg-color: #eee;\n    --text-color: #000;\n  }\n}\n\nbody {\n  background-color: var(--primary-bg-color);\n  color: var(--text-color);\n  padding: 8px;\n}\n\n/*SIDEBAR*/\n\ndiv.search-bar {\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n}\n\ninput,\nbutton {\n  color: var(--text-color);\n  box-shadow: 0 0 4px black;\n  border-radius: 4px;\n  padding: 8px;\n}\n\ninput:hover,\nbutton:hover {\n  background-color: var(--secondary-bg-color);\n}\n\nbutton:active {\n  box-shadow: 0 0 4px black inset;\n}\n\n/*MAIN*/\n\ndiv.main {\n  padding: 2rem 0;\n  max-width: 600px;\n  margin: 0 auto;\n  display: flex;\n  gap: 2rem;\n  flex-direction: column;\n}\n\nsection h2 {\n  text-align: center;\n  font-size: 2rem;\n}\n\nsection p {\n  text-align: center;\n}\n\n[class$='-title'] {\n  font-size: 1.25rem;\n}\n\n.current-details,\n.forecast-details {\n  display: grid;\n  gap: 1rem;\n  grid-template-columns: repeat(3, minmax(min-content, max-content));\n  grid-auto-rows: 90px;\n  justify-content: center;\n  padding: 1rem;\n}\n\n.current-details div,\n.forecast-details div {\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-items: center;\n}\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;EACE;wEACsE;AACxE;;AAEA;EACE;IACE,wBAAwB;IACxB,0BAA0B;IAC1B,kBAAkB;EACpB;AACF;;AAEA;EACE;IACE,wBAAwB;IACxB,0BAA0B;IAC1B,kBAAkB;EACpB;AACF;;AAEA;EACE,yCAAyC;EACzC,wBAAwB;EACxB,YAAY;AACd;;AAEA,UAAU;;AAEV;EACE,aAAa;EACb,SAAS;EACT,uBAAuB;AACzB;;AAEA;;EAEE,wBAAwB;EACxB,yBAAyB;EACzB,kBAAkB;EAClB,YAAY;AACd;;AAEA;;EAEE,2CAA2C;AAC7C;;AAEA;EACE,+BAA+B;AACjC;;AAEA,OAAO;;AAEP;EACE,eAAe;EACf,gBAAgB;EAChB,cAAc;EACd,aAAa;EACb,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;;EAEE,aAAa;EACb,SAAS;EACT,kEAAkE;EAClE,oBAAoB;EACpB,uBAAuB;EACvB,aAAa;AACf;;AAEA;;EAEE,aAAa;EACb,0BAA0B;EAC1B,qBAAqB;AACvB",sourcesContent:[":root {\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,\n    Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --primary-bg-color: #333;\n    --secondary-bg-color: #444;\n    --text-color: #fff;\n  }\n}\n\n@media (prefers-color-scheme: light) {\n  :root {\n    --primary-bg-color: #fff;\n    --secondary-bg-color: #eee;\n    --text-color: #000;\n  }\n}\n\nbody {\n  background-color: var(--primary-bg-color);\n  color: var(--text-color);\n  padding: 8px;\n}\n\n/*SIDEBAR*/\n\ndiv.search-bar {\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n}\n\ninput,\nbutton {\n  color: var(--text-color);\n  box-shadow: 0 0 4px black;\n  border-radius: 4px;\n  padding: 8px;\n}\n\ninput:hover,\nbutton:hover {\n  background-color: var(--secondary-bg-color);\n}\n\nbutton:active {\n  box-shadow: 0 0 4px black inset;\n}\n\n/*MAIN*/\n\ndiv.main {\n  padding: 2rem 0;\n  max-width: 600px;\n  margin: 0 auto;\n  display: flex;\n  gap: 2rem;\n  flex-direction: column;\n}\n\nsection h2 {\n  text-align: center;\n  font-size: 2rem;\n}\n\nsection p {\n  text-align: center;\n}\n\n[class$='-title'] {\n  font-size: 1.25rem;\n}\n\n.current-details,\n.forecast-details {\n  display: grid;\n  gap: 1rem;\n  grid-template-columns: repeat(3, minmax(min-content, max-content));\n  grid-auto-rows: 90px;\n  justify-content: center;\n  padding: 1rem;\n}\n\n.current-details div,\n.forecast-details div {\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-items: center;\n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],l=r.base?c[0]+r.base:c[0],A=a[l]||0,u="".concat(l," ").concat(A);a[l]=A+1;var d=t(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var m=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=r(n,o),l=0;l<a.length;l++){var A=t(a[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),s=t(565),c=t.n(s),l=t(216),A=t.n(l),u=t(589),d=t.n(u),p=t(538),m={};m.styleTagTransform=d(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=A(),e()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;var f=t(402),y={};y.styleTagTransform=d(),y.setAttributes=c(),y.insert=i().bind(null,"head"),y.domAPI=o(),y.insertStyleElement=A(),e()(f.Z,y),f.Z&&f.Z.locals&&f.Z.locals;const E="http://api.weatherapi.com/v1",v="key=66cc3f8096f940309f1100251232609";async function h(n){const e=await fetch(E+"/forecast.json?"+v+"&q="+n);return e.ok||console.error(`Server returned: ${e.status} (${e.statusText})`),await e.json()}function C(n,e,t,r,o){const a=document.createElement(n);return e&&(a.id=e),t&&t.forEach((n=>a.classList.add(n))),r&&(a.textContent=r),o&&o.forEach((n=>a.appendChild(n))),a}function g(n,e,t,r){const o=new Image;return n&&(o.src=n),e&&(o.alt=e),t&&t.forEach((n=>o.classList.add(n))),r&&r.forEach((n=>o.appendChild(n))),o}const b=document.querySelector(".main");function x(n,e,t,r){const o=t[0];let a=[C("p",null,[`${o}-title`],n.charAt(0).toUpperCase()+n.slice(1),null),C("p",null,[`${o}-value`],e,null)];return r&&(a=a.concat(r)),C("div",null,t,null,a)}function B(n){const e=new Date(1e3*n),t=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][e.getDay()],r=e.getDate(),o=["January","February","March","April","May","June","July","August","September","October","November","December"][e.getMonth()],a=e.getFullYear(),i=e.getHours(),s=e.getMinutes();return{date:`${t} ${r} ${o} ${a}`,time:`${i}:${s<10?"0":""}${s}`}}let w="Delhi India",S=h(w);T();const k=document.querySelector("#search");function $(){const n=k.value.trim();n?(w=n,S=h(w),T()):setTimeout((()=>{alert("City Name is required")}),0)}function T(){S.then((n=>{n.error?alert(n.error.message):function(n){b.innerHTML="",function(n){const e=C("h2",null,["location-city"],`${n.location.name}, ${n.location.country}`,null),t=C("p",null,["location-cords"],`${n.location.lat}°N  ${n.location.lon}°E`,null);b.appendChild(C("section",null,["location"],null,[e,t]))}(n),function(n){const e=C("h2",null,["current-header"],"Current",null),t=B(n.current.last_updated_epoch),r=C("p",null,["current-time"],`Last Updated: ${t.date} | ${t.time}`,null),o=g(n.current.condition.icon,n.current.condition.text,["condtition-image"],null),a=C("div",null,["current-details"],null,[x(n.current.condition.text,null,["condition"],[o]),x("temprature",`${n.current.temp_c}°C`,["temp"],null),x("humidity",`${n.current.humidity} %`,["humidity"],null),x("wind",`${n.current.wind_kph}Km/h ${n.current.wind_dir}`,["wind"],null),x("feels Like",`${n.current.feelslike_c}°C`,["feelslike"],null),x("visibility",`${n.current.vis_km} Km`,["visibility"],null)]);b.appendChild(C("section",null,["weather"],null,[e,r,a]))}(n),function(n){const e=C("h2",null,["forcast-header"],"Forecast",null),t=C("p",null,["forcast-time"],`Date: ${B(n.location.localtime_epoch).date}`,null),r=n.forecast.forecastday[0],o=g(r.day.condition.icon,r.day.condition.text,["condtition-image"],null),a=C("div",null,["forecast-details"],null,[x(`${r.day.condition.text}`,null,["condition"],[o]),x("Max Temp",`${r.day.maxtemp_c}°C`,["maxtemp"],null),x("Min Temp",`${r.day.mintemp_c}°C`,["mintemp"],null),x("Sunrise",`${r.astro.sunrise}`,["sunrise"],null),x("Rain Chances",`${r.day.daily_chance_of_rain} %`,["rain"],null),x("Sunset",`${r.astro.sunset}`,["sunset"],null)]);b.appendChild(C("section",null,["forecast"],null,[e,t,a]))}(n)}(n)}),(function(n){console.error(n),alert(n.message)}))}k.addEventListener("keydown",(n=>{"Enter"==n.key&&$()})),document.querySelector(".searchBtn").addEventListener("click",$)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,