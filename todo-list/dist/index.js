(()=>{"use strict";var e={25:(e,n,t)=>{t.d(n,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),s=t.n(a),i=t(728),l=s()(o());l.i(i.Z),l.push([e.id,"/* FOOTER */\n.footer {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  padding: 10px;\n  font-size: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: var(--header-text-color);\n  background-color: var(--theme-color);\n  font-family: var(--font-system);\n}\n\n.footer .fa-github {\n  color: var(--header-text-color);\n  font-size: 24px;\n  transition: transform 0.3s ease-in-out;\n}\n\n.footer .fa-github:hover {\n  transform: rotate(360deg) scale(1.2);\n}\n","",{version:3,sources:["webpack://./src/css/footer.css"],names:[],mappings:"AACA,WAAW;AACX;EACE,eAAe;EACf,SAAS;EACT,WAAW;EACX,aAAa;EACb,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,+BAA+B;EAC/B,oCAAoC;EACpC,+BAA+B;AACjC;;AAEA;EACE,+BAA+B;EAC/B,eAAe;EACf,sCAAsC;AACxC;;AAEA;EACE,oCAAoC;AACtC",sourcesContent:['@import "./variables.css";\n/* FOOTER */\n.footer {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  padding: 10px;\n  font-size: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: var(--header-text-color);\n  background-color: var(--theme-color);\n  font-family: var(--font-system);\n}\n\n.footer .fa-github {\n  color: var(--header-text-color);\n  font-size: 24px;\n  transition: transform 0.3s ease-in-out;\n}\n\n.footer .fa-github:hover {\n  transform: rotate(360deg) scale(1.2);\n}\n'],sourceRoot:""}]);const A=l},850:(e,n,t)=>{t.d(n,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),s=t.n(a),i=t(728),l=s()(o());l.i(i.Z),l.push([e.id,'.header {\n  position: fixed;\n  top: 0;\n  width: 100%;\n  background-color: var(--theme-color);\n  padding: 8px 16px;\n  display: flex;\n  justify-content: space-between;\n}\n\n[class^="nav-"] {\n  display: flex;\n  gap: 8px;\n}\n.header .svgContainer {\n  height: 30px;\n  width: 30px;\n  padding: 4px;\n  border-radius: 4px;\n  cursor: pointer;\n  &:hover {\n    background-color: var(--theme-color-hover);\n  }\n}\n\n.header img {\n  filter: var(--filter);\n}\n\n/*Theme card*/\n\n.select-theme {\n  color: var(--header-text-color);\n  padding: 1rem;\n  position: absolute;\n  top: 50px;\n  right: 10px;\n  border-radius: 8px;\n  width: max-content;\n  opacity: 0;\n  visibility: hidden;\n  transition: 0.2s;\n  background-color: var(--theme-color);\n  &[data-open] {\n    opacity: 1;\n    visibility: visible;\n  }\n}\n\n.select-theme h2 {\n  font-size: 1.5rem;\n  margin: 0rem auto;\n}\n\n.select-theme label {\n  display: block;\n  padding: 8px;\n  &:hover,\n  &.active {\n    background-color: var(--theme-color-hover);\n  }\n}\n',"",{version:3,sources:["webpack://./src/css/header.css"],names:[],mappings:"AAEA;EACE,eAAe;EACf,MAAM;EACN,WAAW;EACX,oCAAoC;EACpC,iBAAiB;EACjB,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,aAAa;EACb,QAAQ;AACV;AACA;EACE,YAAY;EACZ,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf;IACE,0CAA0C;EAC5C;AACF;;AAEA;EACE,qBAAqB;AACvB;;AAEA,aAAa;;AAEb;EACE,+BAA+B;EAC/B,aAAa;EACb,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,kBAAkB;EAClB,kBAAkB;EAClB,UAAU;EACV,kBAAkB;EAClB,gBAAgB;EAChB,oCAAoC;EACpC;IACE,UAAU;IACV,mBAAmB;EACrB;AACF;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,cAAc;EACd,YAAY;EACZ;;IAEE,0CAA0C;EAC5C;AACF",sourcesContent:['@import "./variables.css";\n\n.header {\n  position: fixed;\n  top: 0;\n  width: 100%;\n  background-color: var(--theme-color);\n  padding: 8px 16px;\n  display: flex;\n  justify-content: space-between;\n}\n\n[class^="nav-"] {\n  display: flex;\n  gap: 8px;\n}\n.header .svgContainer {\n  height: 30px;\n  width: 30px;\n  padding: 4px;\n  border-radius: 4px;\n  cursor: pointer;\n  &:hover {\n    background-color: var(--theme-color-hover);\n  }\n}\n\n.header img {\n  filter: var(--filter);\n}\n\n/*Theme card*/\n\n.select-theme {\n  color: var(--header-text-color);\n  padding: 1rem;\n  position: absolute;\n  top: 50px;\n  right: 10px;\n  border-radius: 8px;\n  width: max-content;\n  opacity: 0;\n  visibility: hidden;\n  transition: 0.2s;\n  background-color: var(--theme-color);\n  &[data-open] {\n    opacity: 1;\n    visibility: visible;\n  }\n}\n\n.select-theme h2 {\n  font-size: 1.5rem;\n  margin: 0rem auto;\n}\n\n.select-theme label {\n  display: block;\n  padding: 8px;\n  &:hover,\n  &.active {\n    background-color: var(--theme-color-hover);\n  }\n}\n'],sourceRoot:""}]);const A=l},556:(e,n,t)=>{t.d(n,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),s=t.n(a),i=t(728),l=s()(o());l.i(i.Z),l.push([e.id,'body {\n  height: 100vh;\n}\n.main {\n  height: 100vh;\n  background-color: var(--bg-color);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.sideMenu {\n  color: var(--header-text-color);\n  background-color: var(--theme-color);\n  height: calc(100% - 100px);\n  position: fixed;\n  padding: 1rem;\n  width: 220px;\n  top: 50px;\n  left: -220px;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  transition: left 1s;\n}\n.sideMenu[data-open] {\n  left: 0;\n}\n\n.sideMenu [class^="box-"] {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  cursor: pointer;\n  &:hover {\n    background-color: var(--theme-color-hover);\n  }\n}\n\n.sideMenu .projects-header {\n  display: flex;\n  justify-content: space-between;\n  font-size: 1.5rem;\n  padding: 1rem;\n  cursor: pointer;\n}\n\n.sideMenu .svgContainer {\n  height: 30px;\n  width: 30px;\n  padding: 4px;\n  border-radius: 4px;\n  filter: var(--filter);\n}\n\n#page {\n  height: calc(100% - 100px);\n  width: clamp(300px, 80%, 800px);\n  box-shadow: 0 0 4px 1px red;\n  border-radius: 4px;\n}\n',"",{version:3,sources:["webpack://./src/css/main.css"],names:[],mappings:"AAEA;EACE,aAAa;AACf;AACA;EACE,aAAa;EACb,iCAAiC;EACjC,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,+BAA+B;EAC/B,oCAAoC;EACpC,0BAA0B;EAC1B,eAAe;EACf,aAAa;EACb,YAAY;EACZ,SAAS;EACT,YAAY;EACZ,4BAA4B;EAC5B,+BAA+B;EAC/B,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;AACA;EACE,OAAO;AACT;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,eAAe;EACf;IACE,0CAA0C;EAC5C;AACF;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,iBAAiB;EACjB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,qBAAqB;AACvB;;AAEA;EACE,0BAA0B;EAC1B,+BAA+B;EAC/B,2BAA2B;EAC3B,kBAAkB;AACpB",sourcesContent:['@import "./variables.css";\n\nbody {\n  height: 100vh;\n}\n.main {\n  height: 100vh;\n  background-color: var(--bg-color);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.sideMenu {\n  color: var(--header-text-color);\n  background-color: var(--theme-color);\n  height: calc(100% - 100px);\n  position: fixed;\n  padding: 1rem;\n  width: 220px;\n  top: 50px;\n  left: -220px;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  transition: left 1s;\n}\n.sideMenu[data-open] {\n  left: 0;\n}\n\n.sideMenu [class^="box-"] {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  cursor: pointer;\n  &:hover {\n    background-color: var(--theme-color-hover);\n  }\n}\n\n.sideMenu .projects-header {\n  display: flex;\n  justify-content: space-between;\n  font-size: 1.5rem;\n  padding: 1rem;\n  cursor: pointer;\n}\n\n.sideMenu .svgContainer {\n  height: 30px;\n  width: 30px;\n  padding: 4px;\n  border-radius: 4px;\n  filter: var(--filter);\n}\n\n#page {\n  height: calc(100% - 100px);\n  width: clamp(300px, 80%, 800px);\n  box-shadow: 0 0 4px 1px red;\n  border-radius: 4px;\n}\n'],sourceRoot:""}]);const A=l},538:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),s=t.n(a)()(o());s.push([e.id,"/*** The new CSS Reset - version 1.2.0 (last updated 23.7.2021) ***/\n\n/* Remove all the styles of the \"User-Agent-Stylesheet\", except for the 'display' property */\n*:where(:not(iframe, canvas, img, svg, video):not(svg *)) {\n  all: unset;\n  display: revert;\n}\n\n/* Preferred box-sizing value */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/*\n  Remove list styles (bullets/numbers)\n  in case you use it with normalize.css\n*/\nol,\nul {\n  list-style: none;\n}\n\n/* For images to not be able to exceed their container */\nimg {\n  max-width: 100%;\n}\n\n/* Removes spacing between cells in tables */\ntable {\n  border-collapse: collapse;\n}\n\n/* Revert the 'white-space' property for textarea elements on Safari */\ntextarea {\n  white-space: revert;\n}\n","",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA,mEAAmE;;AAEnE,4FAA4F;AAC5F;EACE,UAAU;EACV,eAAe;AACjB;;AAEA,+BAA+B;AAC/B;;;EAGE,sBAAsB;AACxB;;AAEA;;;CAGC;AACD;;EAEE,gBAAgB;AAClB;;AAEA,wDAAwD;AACxD;EACE,eAAe;AACjB;;AAEA,4CAA4C;AAC5C;EACE,yBAAyB;AAC3B;;AAEA,sEAAsE;AACtE;EACE,mBAAmB;AACrB",sourcesContent:["/*** The new CSS Reset - version 1.2.0 (last updated 23.7.2021) ***/\n\n/* Remove all the styles of the \"User-Agent-Stylesheet\", except for the 'display' property */\n*:where(:not(iframe, canvas, img, svg, video):not(svg *)) {\n  all: unset;\n  display: revert;\n}\n\n/* Preferred box-sizing value */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/*\n  Remove list styles (bullets/numbers)\n  in case you use it with normalize.css\n*/\nol,\nul {\n  list-style: none;\n}\n\n/* For images to not be able to exceed their container */\nimg {\n  max-width: 100%;\n}\n\n/* Removes spacing between cells in tables */\ntable {\n  border-collapse: collapse;\n}\n\n/* Revert the 'white-space' property for textarea elements on Safari */\ntextarea {\n  white-space: revert;\n}\n"],sourceRoot:""}]);const i=s},728:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),s=t.n(a)()(o());s.push([e.id,':root {\n  --font-system: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",\n    Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n}\n\n:root.dark {\n  --header-text-color: #ffffff;\n  --main-text-color: #ffffff;\n  --bg-color: #1e1e1e;\n  --theme-color: #333333;\n  --theme-color-hover: #414141;\n  /* white svg */\n  --filter: invert(100%) sepia(88%) saturate(0%) hue-rotate(104deg)\n    brightness(105%) contrast(101%);\n}\n\n:root.light {\n  --header-text-color: #000000;\n  --main-text-color: #000000;\n  --bg-color: #ffffff;\n  --theme-color: #eeeeee;\n  --theme-color-hover: #dddddd;\n  /*Black svg*/\n  --filter: invert(0%) sepia(98%) saturate(25%) hue-rotate(4deg) brightness(91%)\n    contrast(100%);\n}\n\n:root.red {\n  --header-text-color: #ffffff;\n  --main-text-color: #000000;\n  --bg-color: #ff8f8f;\n  --theme-color: #dc4c3e;\n  --theme-color-hover: #b03d32;\n  /* white svg */\n  --filter: invert(100%) sepia(88%) saturate(0%) hue-rotate(104deg)\n    brightness(105%) contrast(101%);\n}\n\n@media (prefers-color-scheme: dark) {\n  :root.system {\n    --header-text-color: #ffffff;\n    --main-text-color: #ffffff;\n    --bg-color: #1e1e1e;\n    --theme-color: #333333;\n    --theme-color-hover: #414141;\n    /* white svg */\n    --filter: invert(100%) sepia(88%) saturate(0%) hue-rotate(104deg)\n      brightness(105%) contrast(101%);\n  }\n}\n@media (prefers-color-scheme: light) {\n  :root.system {\n    --header-text-color: #000000;\n    --main-text-color: #000000;\n    --bg-color: #ffffff;\n    --theme-color: #eeeeee;\n    --theme-color-hover: #dddddd;\n    /*Black svg*/\n    --filter: invert(0%) sepia(98%) saturate(25%) hue-rotate(4deg)\n      brightness(91%) contrast(100%);\n  }\n}\n',"",{version:3,sources:["webpack://./src/css/variables.css"],names:[],mappings:"AAAA;EACE;gFAC8E;AAChF;;AAEA;EACE,4BAA4B;EAC5B,0BAA0B;EAC1B,mBAAmB;EACnB,sBAAsB;EACtB,4BAA4B;EAC5B,cAAc;EACd;mCACiC;AACnC;;AAEA;EACE,4BAA4B;EAC5B,0BAA0B;EAC1B,mBAAmB;EACnB,sBAAsB;EACtB,4BAA4B;EAC5B,YAAY;EACZ;kBACgB;AAClB;;AAEA;EACE,4BAA4B;EAC5B,0BAA0B;EAC1B,mBAAmB;EACnB,sBAAsB;EACtB,4BAA4B;EAC5B,cAAc;EACd;mCACiC;AACnC;;AAEA;EACE;IACE,4BAA4B;IAC5B,0BAA0B;IAC1B,mBAAmB;IACnB,sBAAsB;IACtB,4BAA4B;IAC5B,cAAc;IACd;qCACiC;EACnC;AACF;AACA;EACE;IACE,4BAA4B;IAC5B,0BAA0B;IAC1B,mBAAmB;IACnB,sBAAsB;IACtB,4BAA4B;IAC5B,YAAY;IACZ;oCACgC;EAClC;AACF",sourcesContent:[':root {\n  --font-system: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",\n    Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n}\n\n:root.dark {\n  --header-text-color: #ffffff;\n  --main-text-color: #ffffff;\n  --bg-color: #1e1e1e;\n  --theme-color: #333333;\n  --theme-color-hover: #414141;\n  /* white svg */\n  --filter: invert(100%) sepia(88%) saturate(0%) hue-rotate(104deg)\n    brightness(105%) contrast(101%);\n}\n\n:root.light {\n  --header-text-color: #000000;\n  --main-text-color: #000000;\n  --bg-color: #ffffff;\n  --theme-color: #eeeeee;\n  --theme-color-hover: #dddddd;\n  /*Black svg*/\n  --filter: invert(0%) sepia(98%) saturate(25%) hue-rotate(4deg) brightness(91%)\n    contrast(100%);\n}\n\n:root.red {\n  --header-text-color: #ffffff;\n  --main-text-color: #000000;\n  --bg-color: #ff8f8f;\n  --theme-color: #dc4c3e;\n  --theme-color-hover: #b03d32;\n  /* white svg */\n  --filter: invert(100%) sepia(88%) saturate(0%) hue-rotate(104deg)\n    brightness(105%) contrast(101%);\n}\n\n@media (prefers-color-scheme: dark) {\n  :root.system {\n    --header-text-color: #ffffff;\n    --main-text-color: #ffffff;\n    --bg-color: #1e1e1e;\n    --theme-color: #333333;\n    --theme-color-hover: #414141;\n    /* white svg */\n    --filter: invert(100%) sepia(88%) saturate(0%) hue-rotate(104deg)\n      brightness(105%) contrast(101%);\n  }\n}\n@media (prefers-color-scheme: light) {\n  :root.system {\n    --header-text-color: #000000;\n    --main-text-color: #000000;\n    --bg-color: #ffffff;\n    --theme-color: #eeeeee;\n    --theme-color-hover: #dddddd;\n    /*Black svg*/\n    --filter: invert(0%) sepia(98%) saturate(25%) hue-rotate(4deg)\n      brightness(91%) contrast(100%);\n  }\n}\n'],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(s[l]=!0)}for(var A=0;A<e.length;A++){var c=[].concat(e[A]);r&&s[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),n.push(c))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},s=[],i=0;i<e.length;i++){var l=e[i],A=r.base?l[0]+r.base:l[0],c=a[A]||0,d="".concat(A," ").concat(c);a[A]=c+1;var u=t(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var f=o(p,r);r.byIndex=i,n.splice(i,0,{identifier:d,updater:f,references:1})}s.push(d)}return s}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=t(a[s]);n[i].references--}for(var l=r(e,o),A=0;A<a.length;A++){var c=t(a[A]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!e;)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),s=t.n(a),i=t(565),l=t.n(i),A=t(216),c=t.n(A),d=t(589),u=t.n(d),p=t(538),f={};f.styleTagTransform=u(),f.setAttributes=l(),f.insert=s().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=c(),n()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;var h=t(728),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=s().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=c(),n()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;var C=t(850),g={};g.styleTagTransform=u(),g.setAttributes=l(),g.insert=s().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=c(),n()(C.Z,g),C.Z&&C.Z.locals&&C.Z.locals;var v=t(556),E={};E.styleTagTransform=u(),E.setAttributes=l(),E.insert=s().bind(null,"head"),E.domAPI=o(),E.insertStyleElement=c(),n()(v.Z,E),v.Z&&v.Z.locals&&v.Z.locals;var B=t(25),b={};function x(e,n,t,r,o){const a=document.createElement(e);return n&&(a.id=n),t&&t.forEach((e=>a.classList.add(e))),r&&(a.textContent=r),o&&o.forEach((e=>a.appendChild(e))),a}function y(e,n,t,r){const o=new Image;return e&&(o.src=e),n&&(o.alt=n),t&&t.forEach((e=>o.classList.add(e))),r&&r.forEach((e=>o.appendChild(e))),o}function w(){let e=document.querySelector(":root"),n="system";function t(e){const n=x("input",null,null,null,null);return n.setAttribute("type","radio"),n.setAttribute("name","theme"),n.setAttribute("value",e),x("label",null,null,e,[n])}return window.matchMedia("(prefers-color-scheme: dark)").matches,{updateTheme:function(t){document.querySelector(`[value="${n}"]`).parentElement.classList.remove("active"),e.className=t,n=t,document.querySelector(`[value="${n}"]`).parentElement.classList.add("active")},addThemesCard:function(){let e=[t("system"),t("dark"),t("light"),t("red")],n=x("h2",null,null,"Select Theme",null),r=x("div",null,null,null,null);e.forEach((e=>{r.appendChild(e)}));let o=x("div",null,["select-theme"],null,[n,r]);document.querySelector(".svg-colorPallete").parentElement.appendChild(o)},toggleThemeCard:function(){document.querySelector(".select-theme").toggleAttribute("data-open")}}}b.styleTagTransform=u(),b.setAttributes=l(),b.insert=s().bind(null,"head"),b.domAPI=o(),b.insertStyleElement=c(),n()(B.Z,b),B.Z&&B.Z.locals&&B.Z.locals;const S=t.p+"images/c51f08dd7631788bb763.svg",k=t.p+"images/172dd62834686206807d.svg",T=t.p+"images/2c7dee90aec26a4ab0f9.svg",I=t.p+"images/92158d605c54a6aef63e.svg",Z=t.p+"images/5b1f5a18664ddae6eb87.svg",j=t.p+"images/af20980ebf0d3eed9966.svg",M=t.p+"images/92158d605c54a6aef63e.svg",q=t.p+"images/3a5eb44c7003a752e879.svg",R=t.p+"images/721ab9734afa31e4194e.svg";function F(e){function n(e,n,t){return x("button",null,["svgContainer"],null,[y(e,n,t,null)])}return{createSideMenu:function(){function t(e,n,t){let r=x("p",null,null,n,null);return x("div",null,t,null,[e,r])}let r=x("div",null,["top-div"],null,[t(n(j,"today icon",["svg-today"]),"Today",["box-today"]),t(n(M,"upcoming icon",["svg-upcoming"]),"Upcoming",["box-upcoming"])]),o=x("h2",null,["projects-header2"],"Projects",null),a=x("div",null,["projects-header"],null,[o,n(T,"Add project",["svg-add-project"])]),s=x("div",null,["bot-div"],null,[t(n(q,"House icon",["svg-house"]),"Home",["box-house"]),t(n(R,"work icon",["svg-work"]),"Work",["box-work"])]),i=x("div",null,["sideMenu"],null,[r,a,s]);e.appendChild(i)},toggleSideMenu:function(){document.querySelector(".sideMenu").toggleAttribute("data-open")},createPage:function(){e.appendChild(x("div","page",null,null,null))},ShowHome:function(){},ShowUpcoming:function(){},ShowProject:function(e){}}}function L(){let e=w(),n=F();return{addListners:function(){document.querySelector(".svg-hamburger").parentElement.addEventListener("click",(()=>{n.toggleSideMenu()})),document.querySelector(".svg-home").parentElement.addEventListener("click",(()=>{alert("This feature is not yet Implemented")})),document.querySelector(".svg-add").parentElement.addEventListener("click",(()=>{alert("This feature is not yet Implemented")})),document.querySelector(".svg-calendar-header").parentElement.addEventListener("click",(()=>{alert("This feature is not yet Implemented")})),document.querySelector(".svg-colorPallete").parentElement.addEventListener("click",(()=>{e.toggleThemeCard()})),[...document.querySelectorAll(".select-theme input")].forEach((n=>{n.addEventListener("click",(n=>{e.updateTheme(n.target.value),e.toggleThemeCard()}))})),document.querySelector(".box-today").addEventListener("click",(()=>{alert("This feature is not yet Implemented")})),document.querySelector(".box-upcoming").addEventListener("click",(()=>{alert("This feature is not yet Implemented")})),document.querySelector(".projects-header").addEventListener("click",(()=>{alert("This feature is not yet Implemented")})),[...document.querySelector(".bot-div").querySelectorAll('[class^="box-"]')].forEach((e=>{!function(e){e.addEventListener("click",(()=>{console.log(e.className.slice(4)),alert("This feature is not yet Implemented")}))}(e)}))}}}(()=>{const e=document.querySelector(".header"),n=document.querySelector(".main"),t=document.querySelector(".footer");let r=function(e){let n=[r(S,"hamburger icon",["svg-hamburger"]),r(k,"home icon",["svg-home"])],t=[r(T,"add icon",["svg-add"]),r(I,"calendar icon",["svg-calendar-header"]),r(Z,"theme icon",["svg-colorPallete"])];function r(e,n,t){return x("button",null,["svgContainer"],null,[y(e,n,t,null)])}return{display:function(){const r=x("div",null,["nav-left"],null,null);n.forEach((e=>{r.appendChild(e)}));const o=x("div",null,["nav-right"],null,null);t.forEach((e=>{o.appendChild(e)})),e.appendChild(r),e.appendChild(o)},remove:function(){}}}(e),o=w(),a=function(e){return{display:function(){e.innerHTML='<p>Copyright &copy;<script>document.write(new Date().getFullYear());<\/script>argon-3467<a href="https://github.com/argon-3467"><i class="fa-brands fa-github"></i></a></p>'},remove:function(){document.querySelector(".footer").remove()}}}(t),s=F(n),i=L();r.display(),s.createSideMenu(),s.createPage(),o.addThemesCard(),a.display(),o.updateTheme("system"),i.addListners()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,